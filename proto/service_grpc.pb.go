// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoClient interface {
	EventStream(ctx context.Context, opts ...grpc.CallOption) (Echo_EventStreamClient, error)
}

type echoClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoClient(cc grpc.ClientConnInterface) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) EventStream(ctx context.Context, opts ...grpc.CallOption) (Echo_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Echo_ServiceDesc.Streams[0], "/service.Echo/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoEventStreamClient{stream}
	return x, nil
}

type Echo_EventStreamClient interface {
	Send(*Events) error
	Recv() (*Events, error)
	grpc.ClientStream
}

type echoEventStreamClient struct {
	grpc.ClientStream
}

func (x *echoEventStreamClient) Send(m *Events) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoEventStreamClient) Recv() (*Events, error) {
	m := new(Events)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServer is the server API for Echo service.
// All implementations must embed UnimplementedEchoServer
// for forward compatibility
type EchoServer interface {
	EventStream(Echo_EventStreamServer) error
	mustEmbedUnimplementedEchoServer()
}

// UnimplementedEchoServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServer struct {
}

func (UnimplementedEchoServer) EventStream(Echo_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedEchoServer) mustEmbedUnimplementedEchoServer() {}

// UnsafeEchoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServer will
// result in compilation errors.
type UnsafeEchoServer interface {
	mustEmbedUnimplementedEchoServer()
}

func RegisterEchoServer(s grpc.ServiceRegistrar, srv EchoServer) {
	s.RegisterService(&Echo_ServiceDesc, srv)
}

func _Echo_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServer).EventStream(&echoEventStreamServer{stream})
}

type Echo_EventStreamServer interface {
	Send(*Events) error
	Recv() (*Events, error)
	grpc.ServerStream
}

type echoEventStreamServer struct {
	grpc.ServerStream
}

func (x *echoEventStreamServer) Send(m *Events) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoEventStreamServer) Recv() (*Events, error) {
	m := new(Events)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Echo_ServiceDesc is the grpc.ServiceDesc for Echo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Echo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _Echo_EventStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
